# Copyright 2010  Bart Veldstra
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products 
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Import('base_env')
env = base_env.Clone()

mymode = ARGUMENTS.get('mode', 'debug')
debug_log = ARGUMENTS.get('log', 'none')

sources = Glob('src/*.cpp') + Glob('src/processmodels/*.cpp')

env.Append(CCFLAGS= '-Wall %s %s'%('-O3' if mymode=='release' else '-g', '-DDEBUG_LOG' if debug_log=='debug' else ''))
# modified by bender
#if mymode=='release':
#	env.Append(CCFLAGS='-O3 -Wall') # -DDEBUG_LOG')
#else:
#	env.Append(CCFLAGS='-g -Wall -DDEBUG_LOG')

env.Append(CPPPATH=[
	'include',
	'include/processmodels', 
	'../SDSMath/include', 
	'../SDSCommon/include'
	
	])
	
env.Append(LIBS=['SDSMath', 
	'SDSCommon', 
	'config++', 
	'geometry'
	])
	
env.Append(LIBPATH=[	 
	'../SDSCommon/Release', 
	'../SDSMath/Release'
	])

libsds = env.SharedLibrary('SDS', sources)
env.Install('Release', libsds)

Import('shared')
shared.append(libsds)
Export('env', 'shared')
SConscript('extra/SConscript')
#Return('libsds')
